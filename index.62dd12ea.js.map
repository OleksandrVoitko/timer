{"mappings":"sEACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,WCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,E,EAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,C,ECRX,IAAMgB,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,6BAChCE,UAAWH,SAASC,cAAc,kBA8E9BG,EAAQ,IAAX,W,sBA3EGC,EACQC,G,IAAEC,EAAFD,EAAEC,OAAQC,EAAVF,EAAUG,U,aACpBC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKG,YAAa,EAClBH,KAAKH,OAASA,EACdG,KAAKD,UAAYD,EAEjBE,KAAKI,M,iBAGPrB,IAAA,O,MAAA,WACE,IAAMsB,EAAOL,KAAKM,kBAAkB,GACpCN,KAAKH,OAAOQ,E,IAGdtB,IAAA,Q,MAAA,W,WACE,IAAIiB,KAAKE,SAAT,CAGIF,KAAKG,aACPH,KAAKD,UAAUC,KAAKG,YACpBH,KAAKG,YAAa,GAGpBH,KAAKE,UAAW,EAChBF,KAAKI,OAEL,IAAMG,EAAYC,KAAKC,MAEvBT,KAAKC,WAAaS,aAAY,WAC5B,IACMC,EADcH,KAAKC,MACOF,EAC1BF,EAAOO,EAAKN,kBAAkBK,GACpCC,EAAKf,OAAOQ,E,GACX,IAjBD,C,IAoBJtB,IAAA,O,MAAA,YACOiB,KAAKE,UAAaF,KAAKG,cAGxBH,KAAKG,YACPH,KAAKI,OACLJ,KAAKD,UAAUC,KAAKG,YACpBH,KAAKG,YAAa,IAElBU,cAAcb,KAAKC,YACnBD,KAAKE,UAAW,EAChBF,KAAKD,UAAUC,KAAKG,YACpBH,KAAKG,YAAa,G,IAOtBpB,IAAA,oB,MAAA,SAAkBsB,GAQhB,MAAO,CAAES,MAPKd,KAAKe,IACjBC,KAAKC,MAAMZ,EAAS,MAAyB,OAM/Ba,QAJAlB,KAAKe,IACnBC,KAAKC,MAAMZ,EAAS,KAAoB,MAGjBc,QADTnB,KAAKe,IAAIC,KAAKC,MAAMZ,EAAS,IAAc,M,IAM7DtB,IAAA,M,MAAA,SAAId,GACF,OAAOmD,OAAOnD,GAAOoD,SAAS,EAAG,I,OAIlC,GAAW,CAAU,CAAExB,OAQ1B,SAAyBD,G,IAAEkB,EAAFlB,EAAEkB,MAAOI,EAATtB,EAASsB,QAASC,EAAlBvB,EAAkBuB,QACzC/B,EAAKK,UAAU6B,YAAc,GAAYC,OAATT,EAAM,KAAcS,OAAXL,EAAQ,KAAWK,OAARJ,E,EATHpB,UAYnD,SAAmBK,GAEfhB,EAAKI,QAAQ8B,YADXlB,EACyB,OAEA,O,IAd/BhB,EAAKC,SAASmC,iBAAiB,QAAS9B,EAAM+B,MAAMC,KAAKhC,IACzDN,EAAKI,QAAQgC,iBAAiB,QAAS9B,EAAMiC,KAAKD,KAAKhC,G","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","const refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[ data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick, updateBtn }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.resetBtnOn = false;\n    this.onTick = onTick;\n    this.updateBtn = updateBtn;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    if (this.resetBtnOn) {\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = false;\n    }\n\n    this.isActive = true;\n    this.init();\n\n    const startTime = Date.now();\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    if (!this.isActive && !this.resetBtnOn) {\n      return;\n    }\n    if (this.resetBtnOn) {\n      this.init();\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = false;\n    } else {\n      clearInterval(this.intervalId);\n      this.isActive = false;\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = true;\n    }\n  }\n\n  // - Accepts time in milliseconds,\n  // - calculates how many hours, minutes, seconds are in them.\n  // - Returns an object with the following properties: hours, minutes, seconds.\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const minutes = this.pad(\n      Math.floor((time % (1000 * 60 * 60)) / (1000 * 60))\n    );\n    const seconds = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { hours, minutes, seconds };\n  }\n\n  // - Accepts a number, converts it into a string,\n  // - adds 0 to the beginning if the number has less than two characters.\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockface, updateBtn: updateBtn });\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// - Takes time in milliseconds,\n// - calculates how many hours, minutes, seconds are in them.\n// - Draws the interface.\nfunction updateClockface({ hours, minutes, seconds }) {\n  refs.clockface.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\nfunction updateBtn(init) {\n  if (init) {\n    refs.stopBtn.textContent = 'Stop';\n  } else {\n    refs.stopBtn.textContent = 'Reset';\n  }\n}\n"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$b8f9b7833fa37166$var$refs","startBtn","document","querySelector","stopBtn","clockface","$b8f9b7833fa37166$var$timer","Timer","param","onTick","_$updateBtn","updateBtn","this","intervalId","isActive","resetBtnOn","init","time","getTimeComponents","startTime","Date","now","setInterval","deltaTime","_this","clearInterval","hours","pad","Math","floor","minutes","seconds","String","padStart","textContent","concat","addEventListener","start","bind","stop"],"version":3,"file":"index.62dd12ea.js.map"}