{"mappings":"AAAAA,KAAO,CACLC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,6BAChCE,UAAWH,SAASC,cAAc,kBA8EpC,MAAMG,EAAQ,IA3Ed,MAWEC,OACE,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGdI,QACE,GAAIH,KAAKI,SACP,OAEEJ,KAAKK,aACPL,KAAKM,UAAUN,KAAKK,YACpBL,KAAKK,YAAa,GAGpBL,KAAKI,UAAW,EAChBJ,KAAKF,OAEL,MAAMS,EAAYC,KAAKC,MAEvBT,KAAKU,WAAaC,aAAY,KAC5B,MACMC,EADcJ,KAAKC,MACOF,EAC1BR,EAAOC,KAAKC,kBAAkBW,GACpCZ,KAAKE,OAAOH,EAAK,GAChB,I,CAGLc,QACOb,KAAKI,UAAaJ,KAAKK,cAGxBL,KAAKK,YACPL,KAAKF,OACLE,KAAKM,UAAUN,KAAKK,YACpBL,KAAKK,YAAa,IAElBS,cAAcd,KAAKU,YACnBV,KAAKI,UAAW,EAChBJ,KAAKM,UAAUN,KAAKK,YACpBL,KAAKK,YAAa,G,CAOtBJ,kBAAkBF,GAQhB,MAAO,C,MAPOC,KAAKe,IACjBC,KAAKC,MAAMlB,EAAS,MAAyB,O,QAE/BC,KAAKe,IACnBC,KAAKC,MAAMlB,EAAS,KAAoB,M,QAE1BC,KAAKe,IAAIC,KAAKC,MAAMlB,EAAS,IAAc,M,CAM7DgB,IAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAtEnCC,aAAYnB,OAAEA,EAAQI,UAAAgB,IACpBtB,KAAKU,WAAa,KAClBV,KAAKI,UAAW,EAChBJ,KAAKK,YAAa,EAClBL,KAAKE,OAASA,EAEdF,KAAKF,OACLE,KAAKM,UAAYgB,C,GAmEG,CAAEpB,OAQ1B,UAAyBqB,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IACzClC,KAAKK,UAAU8B,YAAc,GAAGH,KAASC,KAAWC,G,EATHnB,UAYnD,SAAmBR,GAEfP,KAAKI,QAAQ+B,YADX5B,EACyB,OAEA,O,IAd/BP,KAAKC,SAASmC,iBAAiB,QAAS9B,EAAMM,MAAMyB,KAAK/B,IACzDN,KAAKI,QAAQgC,iBAAiB,QAAS9B,EAAMgB,KAAKe,KAAK/B","sources":["src/index.js"],"sourcesContent":["refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[ data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick, updateBtn }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.resetBtnOn = false;\n    this.onTick = onTick;\n\n    this.init();\n    this.updateBtn = updateBtn;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    if (this.resetBtnOn) {\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = false;\n    }\n\n    this.isActive = true;\n    this.init();\n\n    const startTime = Date.now();\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    if (!this.isActive && !this.resetBtnOn) {\n      return;\n    }\n    if (this.resetBtnOn) {\n      this.init();\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = false;\n    } else {\n      clearInterval(this.intervalId);\n      this.isActive = false;\n      this.updateBtn(this.resetBtnOn);\n      this.resetBtnOn = true;\n    }\n  }\n\n  // - Accepts time in milliseconds,\n  // - calculates how many hours, minutes, seconds are in them.\n  // - Returns an object with the following properties: hours, minutes, seconds.\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const minutes = this.pad(\n      Math.floor((time % (1000 * 60 * 60)) / (1000 * 60))\n    );\n    const seconds = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { hours, minutes, seconds };\n  }\n\n  // - Accepts a number, converts it into a string,\n  // - adds 0 to the beginning if the number has less than two characters.\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockface, updateBtn: updateBtn });\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// - Takes time in milliseconds,\n// - calculates how many hours, minutes, seconds are in them.\n// - Draws the interface.\nfunction updateClockface({ hours, minutes, seconds }) {\n  refs.clockface.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\nfunction updateBtn(init) {\n  if (init) {\n    refs.stopBtn.textContent = 'Stop';\n  } else {\n    refs.stopBtn.textContent = 'Reset';\n  }\n}\n"],"names":["refs","startBtn","document","querySelector","stopBtn","clockface","$1f0dc3b9307be026$var$timer","init","time","this","getTimeComponents","onTick","start","isActive","resetBtnOn","updateBtn","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","constructor","updateBtn1","hours","minutes","seconds","textContent","addEventListener","bind"],"version":3,"file":"index.90095471.js.map"}